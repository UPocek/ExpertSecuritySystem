package com.ftn.sbnz.rules.backward_product;

import com.ftn.sbnz.model.models.ReportFilter;
import com.ftn.sbnz.model.models.AggregateProduct;
import com.ftn.sbnz.model.models.Location;
import com.ftn.sbnz.model.models.ProductReportResult;

query isContainedIn( String x, String y )
  Location( x, y; )
  or
  ( Location( z, y; ) and isContainedIn( x, z; ) )
end

rule "product report 1"
agenda-group "productReport"
no-loop
  when
    $filter: ReportFilter($productGroup:productGroup,$startDate:startDate,$endDate:endDate, $interval:interval)
    not(ProductReportResult(productGroup == $productGroup, startDate == $startDate, interval == $interval))
    $ad: AggregateProduct(act == "return",timeStamp after $startDate, timeStamp before $endDate, interval == $interval, isProcessed == false, $productGroup1: productGroup) 
    isContainedIn($productGroup1, $productGroup;)
  then
    System.out.println("Okidac 1");
    modify($ad){setProcessed(true)};
   if ($filter.getType().equals("average_people_store") || $filter.getType().equals("average_people_reccuring")){
        insert(new ProductReportResult($ad.getAverage(), $startDate, $productGroup, $interval));
    }else if($filter.getType().equals("max_people_reccuring")){
     insert(new ProductReportResult($ad.getMax(), $startDate, $productGroup, $interval));
    }else if($filter.getType().equals("averagmin_people_reccuringe_people_store")){
     insert(new ProductReportResult($ad.getMin(), $startDate, $productGroup, $interval));
    }
    else{
        insert(new ProductReportResult($ad.getSum(),$startDate, $productGroup, $interval));
    }
    
end;

rule "product report 2"
agenda-group "productReport"
no-loop
  when
    $filter: ReportFilter( $product:product,$startDate:startDate,$endDate:endDate, $interval:interval)
    $dpcrr: ProductReportResult(product == $product, startDate == $startDate, interval == $interval, $peopleCount:peopleCount)
    $ad : AggregateProduct(act == "return",interval == $interval, timeStamp after $startDate , timeStamp before $endDate, isProcessed == false,$location1:product)
    isContainedIn($location1, $product;)
  then
  System.out.println("Okidac 2");
    modify($ad){setProcessed(true)};
    if ($filter.getType().equals("average_people_store") || $filter.getType().equals("average_people_reccuring")){
      modify($dpcrr){setProductGroup(($peopleCount + $ad.getAggregation().getAverage())/2)};
    }else if($filter.getType().equals("max_people_reccuring")){
      modify($dpcrr){setProductGroup($peopleCount > $ad.getAggregation().getMax() 
            ? $peopleCount 
            : $ad.getAggregation().getMax())};
    }else if($filter.getType().equals("averagmin_people_reccuringe_people_store")){
      modify($dpcrr){setProductGroup($peopleCount < $ad.getAggregation().getMin() 
            ? $peopleCount 
            : $ad.getAggregation().getMin())};
    }
    else{
        modify($dpcrr){setProductGroup($peopleCount + $ad.getAggregation().getSum())};
    }
end;

rule "product report 3"
agenda-group "productReport"
no-loop
  when
    $filter: ReportFilter($product:product,$startDate:startDate,$endDate:endDate, $interval:interval)
    not(ProductReportResult(product == $product, startDate == $startDate, interval == $interval))
    $ad: AggregateProduct(act == "return",timeStamp after $startDate, timeStamp before $endDate, interval == $interval, isProcessed == false, product == $product) 
  then
  System.out.println("Okidac 3");
    modify($ad){setProcessed(true)};
    if ($filter.getType().equals("average_people_store") || $filter.getType().equals("average_people_reccuring")) {
        insert(new ProductReportResult($ad.getAggregation().getAverage(), $startDate, $product, $interval));
    }else if($filter.getType().equals("max_people_reccuring")){
     insert(new ProductReportResult($ad.getAggregation().getMax(), $startDate, $product, $interval));
    }else if($filter.getType().equals("averagmin_people_reccuringe_people_store")){
     insert(new ProductReportResult($ad.getAggregation().getMin(), $startDate, $product, $interval));
    }
    else{
        insert(new ProductReportResult($ad.getAggregation().getSum(),$startDate, $product, $interval));
    }
end;

rule "product report 4"
agenda-group "productReport"
no-loop
  when
    $filter: ReportFilter($product:product,$startDate:startDate,$endDate:endDate, $interval:interval)
    $dpcrr: ProductReportResult(product == $product, startDate == $startDate, interval == $interval, $peopleCount:peopleCount)
    $ad : AggregateProduct(act == "return",interval == $interval, timeStamp after $startDate , timeStamp before $endDate, product == $product,isProcessed == false)
  then
  System.out.println("Okidac 4");
    modify($ad){setProcessed(true)};
    if ($filter.getType().equals("average_people_store") || $filter.getType().equals("average_people_reccuring")){
      modify($dpcrr){setProductGroup(($peopleCount + $ad.getAggregation().getAverage())/2)};
    }else if($filter.getType().equals("max_people_reccuring")){
      modify($dpcrr){setProductGroup($peopleCount > $ad.getAggregation().getMax() 
            ? $peopleCount 
            : $ad.getAggregation().getMax())};
    }else if($filter.getType().equals("averagmin_people_reccuringe_people_store")){
      modify($dpcrr){setProductGroup($peopleCount < $ad.getAggregation().getMin() 
            ? $peopleCount 
            : $ad.getAggregation().getMin())};
    }
    else{
        modify($dpcrr){setProductGroup($peopleCount + $ad.getAggregation().getSum())};
    }
    
end;

rule "Total ranking report 1"
agenda-group "productReport"
no-loop
  when
    $filter: ReportFilter(type == "ranking",product == null, $startDate:startDate,$endDate:endDate, $interval:interval)
    $l: Location($product:item)
    not(ReportFilter(product == $product))
 then
 System.out.println("Okidac 5");
    insert(new ReportFilter($startDate, $endDate, null, $product, $interval, "ranking"));
end;